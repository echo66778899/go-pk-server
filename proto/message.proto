syntax = "proto3";

package mypk;

option go_package = "../gen;mypkpb";

// Enum for card rank
enum RankType {
    UNSPECIFIED_RANK = 0; // Default value, should not be used
    DEUCE = 1;            // 2 (Deuce)
    THREE = 2;            // 3
    FOUR = 3;             // 4
    FIVE = 4;             // 5
    SIX = 5;              // 6
    SEVEN = 6;            // 7
    EIGHT = 7;            // 8
    NINE = 8;             // 9
    TEN = 9;              // 10
    JACK = 10;            // Jack
    QUEEN = 11;           // Queen
    KING = 12;            // King
    ACE = 13;             // Ace
}

enum SuitType {
    HEARTS = 0;
    DIAMONDS = 1;
    CLUBS = 2;
    SPADES = 3;
}

enum PlayerStatusType {
    FOLD = 0;
    CHECK = 1;
    CALL = 2;
    RAISE = 3;
    ALLIN = 4;
}

enum RoundStateType {
    INITIAL   = 0;
    PREFLOP   = 1;
    FLOP      = 2;
    TURN      = 3;
    RIVER     = 4;
    SHOW_DOWN = 5;
}

// Message to represent a card
message Card {
    RankType rank = 1;   // Rank of the card (e.g., "A", "2", "10", "J", "Q", "K")
    SuitType suit = 2;   // Suit of the card (e.g., "hearts", "diamonds", "clubs", "spades")
}

// Message to each player
message PeerState {
    int32 table_pos = 1;
    repeated Card player_cards = 2; // Cards of each player in a game
    bool is_chain_man = 3;
}

// Message to represent a player
message Player {
    string id = 1;         // Unique identifier for the player
    string name = 2;       // Player's display name
    int32 table_position = 3; // Player's position on table
    int32 chips = 4;       // Current chip count
    bool is_active = 5;    // If the player is currently active in the hand
    bool is_dealer = 6;    // If the player is the dealer
    string status = 7; // Player's status
    int32 current_bet = 8;
}

message Result {
    int32 winner_position = 1;
    repeated PeerState open_hand = 2;
}

// Message to represent a game state
message GameState {
    repeated Player players = 1;          // List of players
    int32 pot_size = 2;                   // Current size of the pot
    int32 dealer_id = 3;                  // ID of the current dealer/button
    repeated Card community_cards = 4;    // Cards on the table in this round
    int32 current_bet = 6;                // Current bet amount
    RoundStateType current_round = 5;     // Type of the current round
    Result final_result = 7;
}

// Message to represent a player's action
message PlayerAction {
    string player_id = 1;       // ID of the player taking action
    string action_type = 2;     // Type of action (e.g., "fold", "check", "call", "raise", "all_in")
    int32 raise_amount = 3;     // If the action is a raise, the amount raised
}

message JoinRoom {
    string name_id = 1;
	string room = 2;
	string passcode = 3;
	string session_id = 4; // Emtpty string for first time connection
}

message JoinGame {
    string name_id = 1;
    int32  choose_slot = 2;
}

// Message to represent game settings
message GameSetting {
    int32 max_players = 1;           // Maximum number of players allowed in the game
    int32 min_players = 2;           // Minimum number of players needed to start the game
    int32 min_stack_size = 3;        // Minimun number of players' stack size
    int32 small_blind = 4;           // Small blind value
    int32 big_blind = 5;             // Big blind value
    int32 time_per_turn = 7;         // Maximum time (in seconds) allowed for each player to take a turn
}

// Message sent by the client to the server
message ClientMessage {
    oneof message {
        PlayerAction player_action = 1;    // Player's action message
        JoinRoom join_room = 2;
        JoinGame join_game = 3;              // Request to join a game
        string control_message = 4;          // Custome requests to the game
    }
}

// Message sent by the server to the client
message ServerMessage {
    oneof message {
        GameState game_state = 1;          // Updated game state
        GameSetting game_setting = 2;
        PeerState peer_state = 3;
        string game_over = 4;              // Game over message
        string error_message = 5;          // Error message
        string welcome_message = 6;        // Welcome message upon joining
    }
}
