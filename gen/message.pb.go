// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: message.proto

package gpbmessage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for card rank
type RankType int32

const (
	RankType_UNSPECIFIED_RANK RankType = 0  // Default value, should not be used
	RankType_DEUCE            RankType = 1  // 2 (Deuce)
	RankType_THREE            RankType = 2  // 3
	RankType_FOUR             RankType = 3  // 4
	RankType_FIVE             RankType = 4  // 5
	RankType_SIX              RankType = 5  // 6
	RankType_SEVEN            RankType = 6  // 7
	RankType_EIGHT            RankType = 7  // 8
	RankType_NINE             RankType = 8  // 9
	RankType_TEN              RankType = 9  // 10
	RankType_JACK             RankType = 10 // Jack
	RankType_QUEEN            RankType = 11 // Queen
	RankType_KING             RankType = 12 // King
	RankType_ACE              RankType = 13 // Ace
)

// Enum value maps for RankType.
var (
	RankType_name = map[int32]string{
		0:  "UNSPECIFIED_RANK",
		1:  "DEUCE",
		2:  "THREE",
		3:  "FOUR",
		4:  "FIVE",
		5:  "SIX",
		6:  "SEVEN",
		7:  "EIGHT",
		8:  "NINE",
		9:  "TEN",
		10: "JACK",
		11: "QUEEN",
		12: "KING",
		13: "ACE",
	}
	RankType_value = map[string]int32{
		"UNSPECIFIED_RANK": 0,
		"DEUCE":            1,
		"THREE":            2,
		"FOUR":             3,
		"FIVE":             4,
		"SIX":              5,
		"SEVEN":            6,
		"EIGHT":            7,
		"NINE":             8,
		"TEN":              9,
		"JACK":             10,
		"QUEEN":            11,
		"KING":             12,
		"ACE":              13,
	}
)

func (x RankType) Enum() *RankType {
	p := new(RankType)
	*p = x
	return p
}

func (x RankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RankType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (RankType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x RankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RankType.Descriptor instead.
func (RankType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

type SuitType int32

const (
	SuitType_HEARTS   SuitType = 0
	SuitType_DIAMONDS SuitType = 1
	SuitType_CLUBS    SuitType = 2
	SuitType_SPADES   SuitType = 3
)

// Enum value maps for SuitType.
var (
	SuitType_name = map[int32]string{
		0: "HEARTS",
		1: "DIAMONDS",
		2: "CLUBS",
		3: "SPADES",
	}
	SuitType_value = map[string]int32{
		"HEARTS":   0,
		"DIAMONDS": 1,
		"CLUBS":    2,
		"SPADES":   3,
	}
)

func (x SuitType) Enum() *SuitType {
	p := new(SuitType)
	*p = x
	return p
}

func (x SuitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SuitType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (SuitType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x SuitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SuitType.Descriptor instead.
func (SuitType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

type HankRankingType int32

const (
	HankRankingType_HIGH_CARD       HankRankingType = 0
	HankRankingType_ONE_PAIR        HankRankingType = 1
	HankRankingType_TWO_PAIR        HankRankingType = 2
	HankRankingType_THREE_OF_A_KIND HankRankingType = 3
	HankRankingType_STRAIGHT        HankRankingType = 4
	HankRankingType_FLUSH           HankRankingType = 5
	HankRankingType_FULL_HOUSE      HankRankingType = 6
	HankRankingType_FOUR_OF_A_KIND  HankRankingType = 7
	HankRankingType_STRAIGH_FLUSH   HankRankingType = 8
	HankRankingType_ROYAL_FLUSH     HankRankingType = 9
)

// Enum value maps for HankRankingType.
var (
	HankRankingType_name = map[int32]string{
		0: "HIGH_CARD",
		1: "ONE_PAIR",
		2: "TWO_PAIR",
		3: "THREE_OF_A_KIND",
		4: "STRAIGHT",
		5: "FLUSH",
		6: "FULL_HOUSE",
		7: "FOUR_OF_A_KIND",
		8: "STRAIGH_FLUSH",
		9: "ROYAL_FLUSH",
	}
	HankRankingType_value = map[string]int32{
		"HIGH_CARD":       0,
		"ONE_PAIR":        1,
		"TWO_PAIR":        2,
		"THREE_OF_A_KIND": 3,
		"STRAIGHT":        4,
		"FLUSH":           5,
		"FULL_HOUSE":      6,
		"FOUR_OF_A_KIND":  7,
		"STRAIGH_FLUSH":   8,
		"ROYAL_FLUSH":     9,
	}
)

func (x HankRankingType) Enum() *HankRankingType {
	p := new(HankRankingType)
	*p = x
	return p
}

func (x HankRankingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HankRankingType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[2].Descriptor()
}

func (HankRankingType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[2]
}

func (x HankRankingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HankRankingType.Descriptor instead.
func (HankRankingType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

type PlayerStatusType int32

const (
	PlayerStatusType_Unplayable PlayerStatusType = 0  // Player is unable to play the game
	PlayerStatusType_Spectating PlayerStatusType = 1  // Player is sat in but not playing
	PlayerStatusType_Playing    PlayerStatusType = 2  // Player is playing
	PlayerStatusType_Wait4Act   PlayerStatusType = 3  // Player is waiting for user action in their turn
	PlayerStatusType_Fold       PlayerStatusType = 4  // Player has folded
	PlayerStatusType_Check      PlayerStatusType = 5  // Player has checked
	PlayerStatusType_Call       PlayerStatusType = 6  // Player has called
	PlayerStatusType_Raise      PlayerStatusType = 7  // Player has raised
	PlayerStatusType_AllIn      PlayerStatusType = 8  // Player has all in
	PlayerStatusType_LOSER      PlayerStatusType = 9  // Loser
	PlayerStatusType_WINNER     PlayerStatusType = 10 // Winner
	PlayerStatusType_SB         PlayerStatusType = 11 // Small blind
	PlayerStatusType_BB         PlayerStatusType = 12 // Big blind
)

// Enum value maps for PlayerStatusType.
var (
	PlayerStatusType_name = map[int32]string{
		0:  "Unplayable",
		1:  "Spectating",
		2:  "Playing",
		3:  "Wait4Act",
		4:  "Fold",
		5:  "Check",
		6:  "Call",
		7:  "Raise",
		8:  "AllIn",
		9:  "LOSER",
		10: "WINNER",
		11: "SB",
		12: "BB",
	}
	PlayerStatusType_value = map[string]int32{
		"Unplayable": 0,
		"Spectating": 1,
		"Playing":    2,
		"Wait4Act":   3,
		"Fold":       4,
		"Check":      5,
		"Call":       6,
		"Raise":      7,
		"AllIn":      8,
		"LOSER":      9,
		"WINNER":     10,
		"SB":         11,
		"BB":         12,
	}
)

func (x PlayerStatusType) Enum() *PlayerStatusType {
	p := new(PlayerStatusType)
	*p = x
	return p
}

func (x PlayerStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[3].Descriptor()
}

func (PlayerStatusType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[3]
}

func (x PlayerStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerStatusType.Descriptor instead.
func (PlayerStatusType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

type PlayerGameActionType int32

const (
	PlayerGameActionType_FOLD  PlayerGameActionType = 0
	PlayerGameActionType_CHECK PlayerGameActionType = 1
	PlayerGameActionType_CALL  PlayerGameActionType = 2
	PlayerGameActionType_RAISE PlayerGameActionType = 3
	PlayerGameActionType_ALLIN PlayerGameActionType = 4
)

// Enum value maps for PlayerGameActionType.
var (
	PlayerGameActionType_name = map[int32]string{
		0: "FOLD",
		1: "CHECK",
		2: "CALL",
		3: "RAISE",
		4: "ALLIN",
	}
	PlayerGameActionType_value = map[string]int32{
		"FOLD":  0,
		"CHECK": 1,
		"CALL":  2,
		"RAISE": 3,
		"ALLIN": 4,
	}
)

func (x PlayerGameActionType) Enum() *PlayerGameActionType {
	p := new(PlayerGameActionType)
	*p = x
	return p
}

func (x PlayerGameActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerGameActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[4].Descriptor()
}

func (PlayerGameActionType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[4]
}

func (x PlayerGameActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerGameActionType.Descriptor instead.
func (PlayerGameActionType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

type RoundStateType int32

const (
	RoundStateType_INITIAL  RoundStateType = 0
	RoundStateType_PREFLOP  RoundStateType = 1
	RoundStateType_FLOP     RoundStateType = 2
	RoundStateType_TURN     RoundStateType = 3
	RoundStateType_RIVER    RoundStateType = 4
	RoundStateType_SHOWDOWN RoundStateType = 5
)

// Enum value maps for RoundStateType.
var (
	RoundStateType_name = map[int32]string{
		0: "INITIAL",
		1: "PREFLOP",
		2: "FLOP",
		3: "TURN",
		4: "RIVER",
		5: "SHOWDOWN",
	}
	RoundStateType_value = map[string]int32{
		"INITIAL":  0,
		"PREFLOP":  1,
		"FLOP":     2,
		"TURN":     3,
		"RIVER":    4,
		"SHOWDOWN": 5,
	}
)

func (x RoundStateType) Enum() *RoundStateType {
	p := new(RoundStateType)
	*p = x
	return p
}

func (x RoundStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoundStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[5].Descriptor()
}

func (RoundStateType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[5]
}

func (x RoundStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoundStateType.Descriptor instead.
func (RoundStateType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

// Message to represent a card
type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rank RankType `protobuf:"varint,1,opt,name=rank,proto3,enum=gpbmessage.RankType" json:"rank,omitempty"` // Rank of the card (e.g., "A", "2", "10", "J", "Q", "K")
	Suit SuitType `protobuf:"varint,2,opt,name=suit,proto3,enum=gpbmessage.SuitType" json:"suit,omitempty"` // Suit of the card (e.g., "hearts", "diamonds", "clubs", "spades")
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *Card) GetRank() RankType {
	if x != nil {
		return x.Rank
	}
	return RankType_UNSPECIFIED_RANK
}

func (x *Card) GetSuit() SuitType {
	if x != nil {
		return x.Suit
	}
	return SuitType_HEARTS
}

// Message to each player
type PeerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablePos      int32   `protobuf:"varint,1,opt,name=table_pos,json=tablePos,proto3" json:"table_pos,omitempty"`
	IsChainMan    bool    `protobuf:"varint,3,opt,name=is_chain_man,json=isChainMan,proto3" json:"is_chain_man,omitempty"`
	PlayerCards   []*Card `protobuf:"bytes,2,rep,name=player_cards,json=playerCards,proto3" json:"player_cards,omitempty"`       // Cards of each player in a game
	HandRanking   string  `protobuf:"bytes,4,opt,name=hand_ranking,json=handRanking,proto3" json:"hand_ranking,omitempty"`       // Description for player hand ranking at the time, or showing time
	EvaluatedHand []*Card `protobuf:"bytes,5,rep,name=evaluated_hand,json=evaluatedHand,proto3" json:"evaluated_hand,omitempty"` // Bigest hand
}

func (x *PeerState) Reset() {
	*x = PeerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerState) ProtoMessage() {}

func (x *PeerState) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerState.ProtoReflect.Descriptor instead.
func (*PeerState) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *PeerState) GetTablePos() int32 {
	if x != nil {
		return x.TablePos
	}
	return 0
}

func (x *PeerState) GetIsChainMan() bool {
	if x != nil {
		return x.IsChainMan
	}
	return false
}

func (x *PeerState) GetPlayerCards() []*Card {
	if x != nil {
		return x.PlayerCards
	}
	return nil
}

func (x *PeerState) GetHandRanking() string {
	if x != nil {
		return x.HandRanking
	}
	return ""
}

func (x *PeerState) GetEvaluatedHand() []*Card {
	if x != nil {
		return x.EvaluatedHand
	}
	return nil
}

// Message to represent a player
type PlayerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                              // Unique identifier for the player
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                          // Player's display name
	TablePosition int32                  `protobuf:"varint,3,opt,name=table_position,json=tablePosition,proto3" json:"table_position,omitempty"`                                  // Player's position on table
	Chips         int32                  `protobuf:"varint,4,opt,name=chips,proto3" json:"chips,omitempty"`                                                                       // Current chip count
	IsActive      bool                   `protobuf:"varint,5,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`                                                 // If the player is currently active in the hand
	IsDealer      bool                   `protobuf:"varint,6,opt,name=is_dealer,json=isDealer,proto3" json:"is_dealer,omitempty"`                                                 // If the player is the dealer
	Status        PlayerStatusType       `protobuf:"varint,7,opt,name=status,proto3,enum=gpbmessage.PlayerStatusType" json:"status,omitempty"`                                    // Player's status
	CurrentBet    int32                  `protobuf:"varint,8,opt,name=current_bet,json=currentBet,proto3" json:"current_bet,omitempty"`                                           // Player's current bet amount
	ChangeAmount  int32                  `protobuf:"varint,9,opt,name=change_amount,json=changeAmount,proto3" json:"change_amount,omitempty"`                                     // Player's chip changing amount
	NoActions     []PlayerGameActionType `protobuf:"varint,10,rep,packed,name=no_actions,json=noActions,proto3,enum=gpbmessage.PlayerGameActionType" json:"no_actions,omitempty"` // Invalid action that player should not act
}

func (x *PlayerState) Reset() {
	*x = PlayerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerState) ProtoMessage() {}

func (x *PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerState.ProtoReflect.Descriptor instead.
func (*PlayerState) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlayerState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlayerState) GetTablePosition() int32 {
	if x != nil {
		return x.TablePosition
	}
	return 0
}

func (x *PlayerState) GetChips() int32 {
	if x != nil {
		return x.Chips
	}
	return 0
}

func (x *PlayerState) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *PlayerState) GetIsDealer() bool {
	if x != nil {
		return x.IsDealer
	}
	return false
}

func (x *PlayerState) GetStatus() PlayerStatusType {
	if x != nil {
		return x.Status
	}
	return PlayerStatusType_Unplayable
}

func (x *PlayerState) GetCurrentBet() int32 {
	if x != nil {
		return x.CurrentBet
	}
	return 0
}

func (x *PlayerState) GetChangeAmount() int32 {
	if x != nil {
		return x.ChangeAmount
	}
	return 0
}

func (x *PlayerState) GetNoActions() []PlayerGameActionType {
	if x != nil {
		return x.NoActions
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowingCards []*PeerState `protobuf:"bytes,3,rep,name=showing_cards,json=showingCards,proto3" json:"showing_cards,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *Result) GetShowingCards() []*PeerState {
	if x != nil {
		return x.ShowingCards
	}
	return nil
}

// Message to represent a game state
type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players        []*PlayerState `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`                                                               // State of players
	PotSize        int32          `protobuf:"varint,2,opt,name=pot_size,json=potSize,proto3" json:"pot_size,omitempty"`                                               // Current size of the pot
	DealerId       int32          `protobuf:"varint,3,opt,name=dealer_id,json=dealerId,proto3" json:"dealer_id,omitempty"`                                            // Position of the current dealer/button
	CommunityCards []*Card        `protobuf:"bytes,4,rep,name=community_cards,json=communityCards,proto3" json:"community_cards,omitempty"`                           // Cards on the table in this round
	CurrentBet     int32          `protobuf:"varint,5,opt,name=current_bet,json=currentBet,proto3" json:"current_bet,omitempty"`                                      // Current bet amount
	CurrentRound   RoundStateType `protobuf:"varint,6,opt,name=current_round,json=currentRound,proto3,enum=gpbmessage.RoundStateType" json:"current_round,omitempty"` // Type of the current round
	FinalResult    *Result        `protobuf:"bytes,7,opt,name=final_result,json=finalResult,proto3" json:"final_result,omitempty"`                                    // For final result e.g winner, show hands
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *GameState) GetPlayers() []*PlayerState {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *GameState) GetPotSize() int32 {
	if x != nil {
		return x.PotSize
	}
	return 0
}

func (x *GameState) GetDealerId() int32 {
	if x != nil {
		return x.DealerId
	}
	return 0
}

func (x *GameState) GetCommunityCards() []*Card {
	if x != nil {
		return x.CommunityCards
	}
	return nil
}

func (x *GameState) GetCurrentBet() int32 {
	if x != nil {
		return x.CurrentBet
	}
	return 0
}

func (x *GameState) GetCurrentRound() RoundStateType {
	if x != nil {
		return x.CurrentRound
	}
	return RoundStateType_INITIAL
}

func (x *GameState) GetFinalResult() *Result {
	if x != nil {
		return x.FinalResult
	}
	return nil
}

// Message to represent a player's action
type PlayerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerId    string `protobuf:"bytes,1,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`           // Position of the player taking action
	ActionType  string `protobuf:"bytes,2,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`     // Type of action (e.g., "fold", "check", "call", "raise", "all_in")
	RaiseAmount int32  `protobuf:"varint,3,opt,name=raise_amount,json=raiseAmount,proto3" json:"raise_amount,omitempty"` // If the action is a raise, the amount raised
}

func (x *PlayerAction) Reset() {
	*x = PlayerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerAction) ProtoMessage() {}

func (x *PlayerAction) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerAction.ProtoReflect.Descriptor instead.
func (*PlayerAction) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *PlayerAction) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *PlayerAction) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *PlayerAction) GetRaiseAmount() int32 {
	if x != nil {
		return x.RaiseAmount
	}
	return 0
}

type JoinRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameId    string `protobuf:"bytes,1,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	Room      string `protobuf:"bytes,2,opt,name=room,proto3" json:"room,omitempty"`
	Passcode  string `protobuf:"bytes,3,opt,name=passcode,proto3" json:"passcode,omitempty"`
	SessionId string `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"` // Emtpty string for first time connection
}

func (x *JoinRoom) Reset() {
	*x = JoinRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRoom) ProtoMessage() {}

func (x *JoinRoom) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRoom.ProtoReflect.Descriptor instead.
func (*JoinRoom) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *JoinRoom) GetNameId() string {
	if x != nil {
		return x.NameId
	}
	return ""
}

func (x *JoinRoom) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *JoinRoom) GetPasscode() string {
	if x != nil {
		return x.Passcode
	}
	return ""
}

func (x *JoinRoom) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type JoinGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameId     string `protobuf:"bytes,1,opt,name=name_id,json=nameId,proto3" json:"name_id,omitempty"`
	ChooseSlot int32  `protobuf:"varint,2,opt,name=choose_slot,json=chooseSlot,proto3" json:"choose_slot,omitempty"`
}

func (x *JoinGame) Reset() {
	*x = JoinGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinGame) ProtoMessage() {}

func (x *JoinGame) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinGame.ProtoReflect.Descriptor instead.
func (*JoinGame) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *JoinGame) GetNameId() string {
	if x != nil {
		return x.NameId
	}
	return ""
}

func (x *JoinGame) GetChooseSlot() int32 {
	if x != nil {
		return x.ChooseSlot
	}
	return 0
}

type ControlAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlType string  `protobuf:"bytes,1,opt,name=control_type,json=controlType,proto3" json:"control_type,omitempty"`
	Options     []int32 `protobuf:"varint,2,rep,packed,name=options,proto3" json:"options,omitempty"`
}

func (x *ControlAction) Reset() {
	*x = ControlAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlAction) ProtoMessage() {}

func (x *ControlAction) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlAction.ProtoReflect.Descriptor instead.
func (*ControlAction) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *ControlAction) GetControlType() string {
	if x != nil {
		return x.ControlType
	}
	return ""
}

func (x *ControlAction) GetOptions() []int32 {
	if x != nil {
		return x.Options
	}
	return nil
}

// Message to represent game settings
type GameSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPlayers   int32 `protobuf:"varint,1,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`         // Maximum number of players allowed in the game
	MinPlayers   int32 `protobuf:"varint,2,opt,name=min_players,json=minPlayers,proto3" json:"min_players,omitempty"`         // Minimum number of players needed to start the game
	MinStackSize int32 `protobuf:"varint,3,opt,name=min_stack_size,json=minStackSize,proto3" json:"min_stack_size,omitempty"` // Minimun number of players' stack size
	SmallBlind   int32 `protobuf:"varint,4,opt,name=small_blind,json=smallBlind,proto3" json:"small_blind,omitempty"`         // Small blind value
	BigBlind     int32 `protobuf:"varint,5,opt,name=big_blind,json=bigBlind,proto3" json:"big_blind,omitempty"`               // Big blind value
	TimePerTurn  int32 `protobuf:"varint,7,opt,name=time_per_turn,json=timePerTurn,proto3" json:"time_per_turn,omitempty"`    // Maximum time (in seconds) allowed for each player to take a turn.
	AutoNextGame bool  `protobuf:"varint,8,opt,name=auto_next_game,json=autoNextGame,proto3" json:"auto_next_game,omitempty"` // Enable auto next game if all required conditions are met
	AutoNextTime int32 `protobuf:"varint,9,opt,name=auto_next_time,json=autoNextTime,proto3" json:"auto_next_time,omitempty"` // How many seconds to wait for next game
}

func (x *GameSetting) Reset() {
	*x = GameSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSetting) ProtoMessage() {}

func (x *GameSetting) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSetting.ProtoReflect.Descriptor instead.
func (*GameSetting) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *GameSetting) GetMaxPlayers() int32 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *GameSetting) GetMinPlayers() int32 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *GameSetting) GetMinStackSize() int32 {
	if x != nil {
		return x.MinStackSize
	}
	return 0
}

func (x *GameSetting) GetSmallBlind() int32 {
	if x != nil {
		return x.SmallBlind
	}
	return 0
}

func (x *GameSetting) GetBigBlind() int32 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *GameSetting) GetTimePerTurn() int32 {
	if x != nil {
		return x.TimePerTurn
	}
	return 0
}

func (x *GameSetting) GetAutoNextGame() bool {
	if x != nil {
		return x.AutoNextGame
	}
	return false
}

func (x *GameSetting) GetAutoNextTime() int32 {
	if x != nil {
		return x.AutoNextTime
	}
	return 0
}

type PlayerBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName string `protobuf:"bytes,1,opt,name=player_name,json=playerName,proto3" json:"player_name,omitempty"`
	Balance    int32  `protobuf:"varint,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *PlayerBalance) Reset() {
	*x = PlayerBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerBalance) ProtoMessage() {}

func (x *PlayerBalance) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerBalance.ProtoReflect.Descriptor instead.
func (*PlayerBalance) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *PlayerBalance) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *PlayerBalance) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type BalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerBalances []*PlayerBalance `protobuf:"bytes,1,rep,name=player_balances,json=playerBalances,proto3" json:"player_balances,omitempty"`
}

func (x *BalanceInfo) Reset() {
	*x = BalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceInfo) ProtoMessage() {}

func (x *BalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceInfo.ProtoReflect.Descriptor instead.
func (*BalanceInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *BalanceInfo) GetPlayerBalances() []*PlayerBalance {
	if x != nil {
		return x.PlayerBalances
	}
	return nil
}

// Message sent by the client to the server
type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ClientMessage_PlayerAction
	//	*ClientMessage_JoinRoom
	//	*ClientMessage_JoinGame
	//	*ClientMessage_ControlAction
	Message isClientMessage_Message `protobuf_oneof:"message"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (m *ClientMessage) GetMessage() isClientMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ClientMessage) GetPlayerAction() *PlayerAction {
	if x, ok := x.GetMessage().(*ClientMessage_PlayerAction); ok {
		return x.PlayerAction
	}
	return nil
}

func (x *ClientMessage) GetJoinRoom() *JoinRoom {
	if x, ok := x.GetMessage().(*ClientMessage_JoinRoom); ok {
		return x.JoinRoom
	}
	return nil
}

func (x *ClientMessage) GetJoinGame() *JoinGame {
	if x, ok := x.GetMessage().(*ClientMessage_JoinGame); ok {
		return x.JoinGame
	}
	return nil
}

func (x *ClientMessage) GetControlAction() *ControlAction {
	if x, ok := x.GetMessage().(*ClientMessage_ControlAction); ok {
		return x.ControlAction
	}
	return nil
}

type isClientMessage_Message interface {
	isClientMessage_Message()
}

type ClientMessage_PlayerAction struct {
	PlayerAction *PlayerAction `protobuf:"bytes,1,opt,name=player_action,json=playerAction,proto3,oneof"` // Player's action message
}

type ClientMessage_JoinRoom struct {
	JoinRoom *JoinRoom `protobuf:"bytes,2,opt,name=join_room,json=joinRoom,proto3,oneof"` // Request to join a room
}

type ClientMessage_JoinGame struct {
	JoinGame *JoinGame `protobuf:"bytes,3,opt,name=join_game,json=joinGame,proto3,oneof"` // Request to join a game
}

type ClientMessage_ControlAction struct {
	ControlAction *ControlAction `protobuf:"bytes,4,opt,name=control_action,json=controlAction,proto3,oneof"` // Custom control requests to the game
}

func (*ClientMessage_PlayerAction) isClientMessage_Message() {}

func (*ClientMessage_JoinRoom) isClientMessage_Message() {}

func (*ClientMessage_JoinGame) isClientMessage_Message() {}

func (*ClientMessage_ControlAction) isClientMessage_Message() {}

// Message sent by the server to the client
type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ServerMessage_GameState
	//	*ServerMessage_GameSetting
	//	*ServerMessage_PeerState
	//	*ServerMessage_BalanceInfo
	//	*ServerMessage_GameOver
	//	*ServerMessage_ErrorMessage
	//	*ServerMessage_WelcomeMessage
	Message isServerMessage_Message `protobuf_oneof:"message"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (m *ServerMessage) GetMessage() isServerMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ServerMessage) GetGameState() *GameState {
	if x, ok := x.GetMessage().(*ServerMessage_GameState); ok {
		return x.GameState
	}
	return nil
}

func (x *ServerMessage) GetGameSetting() *GameSetting {
	if x, ok := x.GetMessage().(*ServerMessage_GameSetting); ok {
		return x.GameSetting
	}
	return nil
}

func (x *ServerMessage) GetPeerState() *PeerState {
	if x, ok := x.GetMessage().(*ServerMessage_PeerState); ok {
		return x.PeerState
	}
	return nil
}

func (x *ServerMessage) GetBalanceInfo() *BalanceInfo {
	if x, ok := x.GetMessage().(*ServerMessage_BalanceInfo); ok {
		return x.BalanceInfo
	}
	return nil
}

func (x *ServerMessage) GetGameOver() string {
	if x, ok := x.GetMessage().(*ServerMessage_GameOver); ok {
		return x.GameOver
	}
	return ""
}

func (x *ServerMessage) GetErrorMessage() string {
	if x, ok := x.GetMessage().(*ServerMessage_ErrorMessage); ok {
		return x.ErrorMessage
	}
	return ""
}

func (x *ServerMessage) GetWelcomeMessage() string {
	if x, ok := x.GetMessage().(*ServerMessage_WelcomeMessage); ok {
		return x.WelcomeMessage
	}
	return ""
}

type isServerMessage_Message interface {
	isServerMessage_Message()
}

type ServerMessage_GameState struct {
	GameState *GameState `protobuf:"bytes,1,opt,name=game_state,json=gameState,proto3,oneof"` // Updated game state
}

type ServerMessage_GameSetting struct {
	GameSetting *GameSetting `protobuf:"bytes,2,opt,name=game_setting,json=gameSetting,proto3,oneof"` // Updated game setting
}

type ServerMessage_PeerState struct {
	PeerState *PeerState `protobuf:"bytes,3,opt,name=peer_state,json=peerState,proto3,oneof"` // Updated private player information
}

type ServerMessage_BalanceInfo struct {
	BalanceInfo *BalanceInfo `protobuf:"bytes,4,opt,name=balance_info,json=balanceInfo,proto3,oneof"` // Updated all player balance information
}

type ServerMessage_GameOver struct {
	GameOver string `protobuf:"bytes,5,opt,name=game_over,json=gameOver,proto3,oneof"` // Game over message
}

type ServerMessage_ErrorMessage struct {
	ErrorMessage string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3,oneof"` // Error message
}

type ServerMessage_WelcomeMessage struct {
	WelcomeMessage string `protobuf:"bytes,7,opt,name=welcome_message,json=welcomeMessage,proto3,oneof"` // Welcome message upon joining
}

func (*ServerMessage_GameState) isServerMessage_Message() {}

func (*ServerMessage_GameSetting) isServerMessage_Message() {}

func (*ServerMessage_PeerState) isServerMessage_Message() {}

func (*ServerMessage_BalanceInfo) isServerMessage_Message() {}

func (*ServerMessage_GameOver) isServerMessage_Message() {}

func (*ServerMessage_ErrorMessage) isServerMessage_Message() {}

func (*ServerMessage_WelcomeMessage) isServerMessage_Message() {}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x04, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52,
	0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a,
	0x04, 0x73, 0x75, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x67, 0x70,
	0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x73, 0x75, 0x69, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6f, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x4d, 0x61, 0x6e, 0x12, 0x33, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0b, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x6e,
	0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x61, 0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x37, 0x0a, 0x0e,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0d, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65,
	0x64, 0x48, 0x61, 0x6e, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x6e, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x44, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x31, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x6f, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x69, 0x73, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x72, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x22, 0x4c, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x0b, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69,
	0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x42, 0x6c, 0x69,
	0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x54,
	0x75, 0x72, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74,
	0x6f, 0x4e, 0x65, 0x78, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x4a, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x89,
	0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x6a, 0x6f,
	0x69, 0x6e, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x33, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x70, 0x62, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf7, 0x02, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x67, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x70, 0x62,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x67,
	0x61, 0x6d, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29,
	0x0a, 0x0f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2a, 0xa4, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x55, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x48, 0x52, 0x45, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x4f, 0x55, 0x52, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x56, 0x45, 0x10,
	0x04, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x49, 0x58, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45,
	0x56, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x07,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x45,
	0x4e, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x41, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x09, 0x0a,
	0x05, 0x51, 0x55, 0x45, 0x45, 0x4e, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4e, 0x47,
	0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x43, 0x45, 0x10, 0x0d, 0x2a, 0x3b, 0x0a, 0x08, 0x53,
	0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x52, 0x54,
	0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x55, 0x42, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x50, 0x41, 0x44, 0x45, 0x53, 0x10, 0x03, 0x2a, 0xb2, 0x01, 0x0a, 0x0f, 0x48, 0x61, 0x6e,
	0x6b, 0x52, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x48, 0x49, 0x47, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x4e, 0x45, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x57, 0x4f,
	0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x48, 0x52, 0x45, 0x45,
	0x5f, 0x4f, 0x46, 0x5f, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x54, 0x52, 0x41, 0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c,
	0x55, 0x53, 0x48, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x48, 0x4f,
	0x55, 0x53, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x55, 0x52, 0x5f, 0x4f, 0x46,
	0x5f, 0x41, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x47, 0x48, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x4f, 0x59, 0x41, 0x4c, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x09, 0x2a, 0xa9, 0x01,
	0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x6e, 0x70, 0x6c, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x57, 0x61, 0x69, 0x74, 0x34, 0x41, 0x63, 0x74, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x6f, 0x6c, 0x64, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x61, 0x6c, 0x6c, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x61, 0x69, 0x73, 0x65, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x49, 0x6e,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x53, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x42, 0x10,
	0x0b, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x42, 0x10, 0x0c, 0x2a, 0x4b, 0x0a, 0x14, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x49, 0x53, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x4c, 0x4c, 0x49, 0x4e, 0x10, 0x04, 0x2a, 0x57, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x46, 0x4c, 0x4f, 0x50,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x55, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x4f, 0x57, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x42,
	0x13, 0x5a, 0x11, 0x2e, 0x2e, 0x2f, 0x67, 0x65, 0x6e, 0x3b, 0x67, 0x70, 0x62, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_message_proto_goTypes = []any{
	(RankType)(0),             // 0: gpbmessage.RankType
	(SuitType)(0),             // 1: gpbmessage.SuitType
	(HankRankingType)(0),      // 2: gpbmessage.HankRankingType
	(PlayerStatusType)(0),     // 3: gpbmessage.PlayerStatusType
	(PlayerGameActionType)(0), // 4: gpbmessage.PlayerGameActionType
	(RoundStateType)(0),       // 5: gpbmessage.RoundStateType
	(*Card)(nil),              // 6: gpbmessage.Card
	(*PeerState)(nil),         // 7: gpbmessage.PeerState
	(*PlayerState)(nil),       // 8: gpbmessage.PlayerState
	(*Result)(nil),            // 9: gpbmessage.Result
	(*GameState)(nil),         // 10: gpbmessage.GameState
	(*PlayerAction)(nil),      // 11: gpbmessage.PlayerAction
	(*JoinRoom)(nil),          // 12: gpbmessage.JoinRoom
	(*JoinGame)(nil),          // 13: gpbmessage.JoinGame
	(*ControlAction)(nil),     // 14: gpbmessage.ControlAction
	(*GameSetting)(nil),       // 15: gpbmessage.GameSetting
	(*PlayerBalance)(nil),     // 16: gpbmessage.PlayerBalance
	(*BalanceInfo)(nil),       // 17: gpbmessage.BalanceInfo
	(*ClientMessage)(nil),     // 18: gpbmessage.ClientMessage
	(*ServerMessage)(nil),     // 19: gpbmessage.ServerMessage
}
var file_message_proto_depIdxs = []int32{
	0,  // 0: gpbmessage.Card.rank:type_name -> gpbmessage.RankType
	1,  // 1: gpbmessage.Card.suit:type_name -> gpbmessage.SuitType
	6,  // 2: gpbmessage.PeerState.player_cards:type_name -> gpbmessage.Card
	6,  // 3: gpbmessage.PeerState.evaluated_hand:type_name -> gpbmessage.Card
	3,  // 4: gpbmessage.PlayerState.status:type_name -> gpbmessage.PlayerStatusType
	4,  // 5: gpbmessage.PlayerState.no_actions:type_name -> gpbmessage.PlayerGameActionType
	7,  // 6: gpbmessage.Result.showing_cards:type_name -> gpbmessage.PeerState
	8,  // 7: gpbmessage.GameState.players:type_name -> gpbmessage.PlayerState
	6,  // 8: gpbmessage.GameState.community_cards:type_name -> gpbmessage.Card
	5,  // 9: gpbmessage.GameState.current_round:type_name -> gpbmessage.RoundStateType
	9,  // 10: gpbmessage.GameState.final_result:type_name -> gpbmessage.Result
	16, // 11: gpbmessage.BalanceInfo.player_balances:type_name -> gpbmessage.PlayerBalance
	11, // 12: gpbmessage.ClientMessage.player_action:type_name -> gpbmessage.PlayerAction
	12, // 13: gpbmessage.ClientMessage.join_room:type_name -> gpbmessage.JoinRoom
	13, // 14: gpbmessage.ClientMessage.join_game:type_name -> gpbmessage.JoinGame
	14, // 15: gpbmessage.ClientMessage.control_action:type_name -> gpbmessage.ControlAction
	10, // 16: gpbmessage.ServerMessage.game_state:type_name -> gpbmessage.GameState
	15, // 17: gpbmessage.ServerMessage.game_setting:type_name -> gpbmessage.GameSetting
	7,  // 18: gpbmessage.ServerMessage.peer_state:type_name -> gpbmessage.PeerState
	17, // 19: gpbmessage.ServerMessage.balance_info:type_name -> gpbmessage.BalanceInfo
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PeerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*JoinRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*JoinGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ControlAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GameSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PlayerBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*BalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_message_proto_msgTypes[12].OneofWrappers = []any{
		(*ClientMessage_PlayerAction)(nil),
		(*ClientMessage_JoinRoom)(nil),
		(*ClientMessage_JoinGame)(nil),
		(*ClientMessage_ControlAction)(nil),
	}
	file_message_proto_msgTypes[13].OneofWrappers = []any{
		(*ServerMessage_GameState)(nil),
		(*ServerMessage_GameSetting)(nil),
		(*ServerMessage_PeerState)(nil),
		(*ServerMessage_BalanceInfo)(nil),
		(*ServerMessage_GameOver)(nil),
		(*ServerMessage_ErrorMessage)(nil),
		(*ServerMessage_WelcomeMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
